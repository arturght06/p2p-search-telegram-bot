from create_bot import bot, dp
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram import types, Dispatcher
from keyboard import greet_key, brcs_key, admin_key
from config import admin_id, admin_password
from api import pricesString, prices
from connect import check, write, delete, print_all, get_info_db, print_all_price, write_price, delete_price
import datetime as DT
import xlsxwriter


# ean = barcode.get('ean13', barcode_init, writer=ImageWriter())

class FSMcreate(StatesGroup):
    admin_panel = State()
    add_user = State()
    del_user = State()
    check_user = State()
    add_price = State()
    delete_price = State()

async def admin_start(message: types.Message):
	await bot.send_message(chat_id=-1001551885182, text=f'<i>LOG-Admin panel--!</i>\n{message.from_user}\n<b>–¶–µ–π –∞–¥–º—ñ–Ω —É–≤—ñ–π—à–æ–≤ –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å</b>')
	await FSMcreate.admin_panel.set()
	await bot.send_message(chat_id = message.from_user.id, text = "–í—ñ—Ç–∞—éüëã\n–¶–µ –∑—Ä—É—á–Ω–∞ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –≤ —è–∫—ñ–π —Ç–∏ –º–æ–∂–µ—à –∫–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.\n\n<b>\"–î–æ–¥–∞—Ç–∏\"</b><i> - –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É</i>\n<b>\"–í–∏–¥–∞–ª–∏—Ç–∏\"</b><i> - –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–¥</i>\n<b>\"–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ–Ω—Ñ–æ\"</b><i> - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á</i>–∞\n<b>\"–°–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤\"</b><i> - –í–∏–≤–æ–¥–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å—ñ—Ö –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</i>\n\n–£—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤–∞–Ω—ñ –Ω–∏–∂—á–µüòâ" , reply_markup=admin_key)


# add user to db 
# add user to db 
# add user to db
async def add_user_start(message: types.Message, state: FSMContext):
	await FSMcreate.add_user.set()
	await bot.send_message(chat_id=message.from_user.id, text=f'‚úçÔ∏è–ù–∞–ø–∏—à–∏ <b>id</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ <b>—á–∞—Å –∫—ñ–Ω—Ü—è –ø—ñ–¥–ø–∏—Å–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç—ñ UTC)</b>\n(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>904245039 2022 06 22 22:00</code>)\n\n<i>–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î –ø—ñ–¥–ø–∏—Å–∫—É, —Ç–æ –π–æ–≥–æ —á–∞—Å –±—É–¥–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∏–π!</i>', reply_markup=brcs_key)

async def add_user_main(message: types.Message, state: FSMContext):
	try:
		user_id, user_time = str(message.text).split(" ", 1)
		user_time = int((DT.datetime.strptime(user_time, '%Y %m %d %H:%M')).timestamp())
		# print(user_time, user_id)
		return_time_string = DT.datetime.utcfromtimestamp(int(user_time)).strftime('%Y-%m-%d %H:%M')
		await write(user_id, str(user_time))
		await bot.send_message(chat_id = -1001551885182, text=f'<i>LOG-Admin panel--!</i>\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:  <code>{user_id}</code>, –∑–∞–ø–∏—Å–∞–Ω–∏–π —á–∞—Å - <code>{return_time_string}</code>')
		await bot.send_message(chat_id = message.from_user.id, text=f'<b>–ì–æ—Ç–æ–≤–æ!</b>\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:  <code>{user_id}</code>, –∑–∞–ø–∏—Å–∞–Ω–∏–π —á–∞—Å - <code>{return_time_string}</code>', reply_markup=brcs_key)
		await bot.send_message(chat_id = int(user_id), text = f'<i><b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>\n–ü—ñ–¥–ø–∏—Å–∫–∞ –ø–æ–¥–æ–≤–∂–µ–Ω–∞ ‚úÖ</i>')
	except:
		await bot.send_message(chat_id=message.from_user.id, text=f'<i>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö</i>', reply_markup=brcs_key)

# 
# 
# 
async def del_user_start(message: types.Message, state: FSMContext):
	await FSMcreate.del_user.set()
	await bot.send_message(chat_id=message.from_user.id, text=f'‚úçÔ∏è–ù–∞–ø–∏—à–∏ <b>id</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è', reply_markup=brcs_key)

async def del_user_main(message: types.Message, state: FSMContext):
	try:
		user_id = str(message.text)
		delete_process = await delete(user_id)
		if delete_process == True:
			await bot.send_message(chat_id=-1001551885182, text=f'<i>LOG-Admin panel--!</i>\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:<code>{user_id}</code> - –≤–∏–¥–∞–ª–µ–Ω–∏–π!')
			await bot.send_message(chat_id=message.from_user.id, text=f'<b>–ì–æ—Ç–æ–≤–æ!</b>\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:<code>{user_id}</code> - –≤–∏–¥–∞–ª–µ–Ω–∏–π!', reply_markup=brcs_key)
		elif delete_process == False:
			await bot.send_message(chat_id=message.from_user.id, text=f'<i>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</i>', reply_markup=brcs_key)
	except:
		await bot.send_message(chat_id=message.from_user.id, text=f'<i>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</i>', reply_markup=brcs_key)

#
#
#
async def send_csv(id_user, arr):
	workbook = xlsxwriter.Workbook(f'all_users.xlsx')
	worksheet = workbook.add_worksheet()
	
	names = ['ID —é–∑–µ—Ä–∞', "–∫—ñ–ª—å–∫—ñ—Å—Ç—å"]
	row = 0
	column = 0


	for i in arr:
		user_id = i
		user_count = arr.get(i)

		worksheet.write(row, 0, user_id)
		worksheet.write(row, 1, user_count)
		row += 1
	workbook.close()
	with open(f'all_users.xlsx', 'rb') as f:
		await bot.send_document(id_user, f)


async def list_users(message: types.Message, state: FSMContext):
	list_of_users = await print_all()
	list_for_sheet = {}
	await bot.send_message(chat_id=-1001551885182, text=f'<i>LOG-Admin panel--!</i>\n{message.from_user}\n<b>–¶–µ–π –∞–¥–º—ñ–Ω –∑–∞–ø–∏—Ç–∞–≤ –±–∞–∑—É –ø—ñ–¥–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</b>')
	if len(list_of_users) == 0:
		result_text = '<i>–í –±–∞–∑—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ü§∑‚Äç‚ôÇÔ∏è</i>'
		await bot.send_message(chat_id=message.from_user.id, text=f'{result_text}')

	else:
		result_text = '<b>–í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:</b>\n'
		inx = 1
		for i in list_of_users:
			list_for_sheet[i] = str(list_of_users.get(i))
			result_text += f'<i>{inx}</i>.) id: <code>{i}</code>\n'
			inx += 1
			if inx % 50 == 0 or len(list_of_users)+1 == inx:
				await bot.send_message(chat_id=message.from_user.id, text=f'{result_text}')
				# sleep(0.25)
				result_text = ''
	await send_csv(message.from_user.id, list_for_sheet)






# async def list_users2(message: types.Message, state: FSMContext):
# 	list_of_users = await print_all()
# 	await bot.send_message(chat_id=-1001551885182, text=f'<i>LOG-Admin panel--!</i>\n{message.from_user}\n<b>–¶–µ–π –∞–¥–º—ñ–Ω –∑–∞–ø–∏—Ç–∞–≤ –±–∞–∑—É –ø—ñ–¥–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</b>')
# 	if len(list_of_users) == 0:
# 		result_text = '<i>–í –±–∞–∑—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ü§∑‚Äç‚ôÇÔ∏è</i>'
# 	else:
# 		result_text = '<b>–í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:</b>\n'
# 		inx = 1
# 		for i in list_of_users:
# 			return_time_string = DT.datetime.utcfromtimestamp(int(list_of_users.get(i))).strftime('%Y-%m-%d %H:%M')
# 			result_text += f'<i>{inx}</i>.) id: <code>{i}</code>, –∫—ñ–Ω–µ—Ü—å –ø—ñ–¥–ø–∏—Å–∫–∏: <code>{return_time_string}</code>\n'
# 			inx += 1
# 	await bot.send_message(chat_id=message.from_user.id, text=f'{result_text}')

#
#
#
async def check_user_start(message: types.Message, state: FSMContext):
	await FSMcreate.check_user.set()
	await bot.send_message(chat_id=message.from_user.id, text=f'‚úçÔ∏è–ù–∞–ø–∏—à–∏ <b>id</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏', reply_markup=brcs_key)

async def check_user_main(message: types.Message, state: FSMContext):
	try:
		user_id = str(message.text)
		check_info = await get_info_db(user_id)
		if check_info != False:
			return_time_string = DT.datetime.utcfromtimestamp(check_info).strftime('%Y-%m-%d %H:%M')
			await bot.send_message(chat_id=-1001551885182, text=f'<i>LOG-Admin panel--!</i>\n{message.from_user}\n<b>–¶–µ–π –∞–¥–º—ñ–Ω –∑–∞–ø–∏—Ç–∞–≤ –¥–µ—Ç–∞–ª—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ —É {user_id}</b>')
			await bot.send_message(chat_id=message.from_user.id, text=f'<i>–ü—ñ–¥–ø–∏—Å–∫–∞ —É <code>{user_id}</code>\nc–∫—ñ–Ω—á–∏—Ç—å—Å—è: {return_time_string}</i>', reply_markup=brcs_key)
		elif check_info == False:
			await bot.send_message(chat_id=message.from_user.id, text=f'<i>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</i>', reply_markup=brcs_key)
	except:
		await bot.send_message(chat_id=message.from_user.id, text=f'<i>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</i>', reply_markup=brcs_key)





async def list_prices(message: types.Message, state: FSMContext):
	list_of_prices = await print_all_price()
	await bot.send_message(chat_id=-1001551885182, text=f'<i>LOG-Admin panel--!</i>\n{message.from_user}\n<b>–¶–µ–π –∞–¥–º—ñ–Ω –∑–∞–ø–∏—Ç–∞–≤ –±–∞–∑—É —Ü—ñ–Ω –Ω–∞ –ø–∏–¥–ø–∏—Å–∫–∏</b>')
	if len(list_of_prices) == 0:
		result_text = '<i>–í –±–∞–∑—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–∏—Ö —Ü—ñ–Ωü§∑‚Äç‚ôÇÔ∏è</i>'
	else:
		result_text = '<b>–í—Å—ñ —Ü—ñ–Ω–∏:</b>\n'
		inx = 1
		for i in list_of_prices:
			return_price_string = float(list_of_prices.get(i))
			result_text += f'<i>{inx}</i>.) —Å—Ç—Ä–æ–∫: <b>{i}</b>, —Ü—ñ–Ω–∞: <code>{return_price_string}</code>\n'
			inx += 1
	await bot.send_message(chat_id=message.from_user.id, text=f'{result_text}')


async def add_price_start(message: types.Message, state: FSMContext):
	await FSMcreate.add_price.set()
	await bot.send_message(chat_id=message.from_user.id, text=f'‚úçÔ∏è–ù–∞–ø–∏—à–∏ <b>—Å—Ç—Ä–æ–∫ –¥—ñ—ó (—É –¥–Ω—è—Ö)</b> –ø—ñ–¥–ø–∏—Å–∫–∏ —Ç–∞ <b>—Ü—ñ–Ω—É</b>\n(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>31 99.99</code>)\n\n<i>–Ø–∫—â–æ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ü–µ–π —á–∞—Å –≤–∂–µ —ñ—Å–Ω—É—î, —Ç–æ —ó—ó —Ü—ñ–Ω–∞ –±—É–¥–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞!</i>', reply_markup=brcs_key)

async def add_price_main(message: types.Message, state: FSMContext):
	try:
		days, price = str(message.text).split(" ", 1)
		await write_price(days, float(price))
		await bot.send_message(chat_id=-1001551885182, text=f'<i>LOG-Admin panel--!</i>\n–ü—ñ–¥–ø–∏—Å—Ü—ñ –Ω–∞:  <code>{days}</code>, –∑–∞–ø–∏—Å–∞–Ω–∞ —Ü—ñ–Ω–∞ - <code>{price}</code>')
		await bot.send_message(chat_id=message.from_user.id, text=f'<b>–ì–æ—Ç–æ–≤–æ!</b>', reply_markup=brcs_key)
	except:
		await bot.send_message(chat_id=message.from_user.id, text=f'<i>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö</i>', reply_markup=brcs_key)




async def del_price_start(message: types.Message, state: FSMContext):
	await FSMcreate.delete_price.set()
	await bot.send_message(chat_id=message.from_user.id, text=f'‚úçÔ∏è–ù–∞–ø–∏—à–∏ —è–∫–∏–π <b>—á–∞—Å</b> —É –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è', reply_markup=brcs_key)

async def del_price_main(message: types.Message, state: FSMContext):
	try:
		days = str(message.text)
		delete_process = await delete_price(days)
		if delete_process == True:
			await bot.send_message(chat_id=-1001551885182, text=f'<i>LOG-Admin panel--!</i>\n–ü—ñ–¥–ø–∏—Å–∫a —Å—Ç—Ä–æ–∫–æ–º –Ω–∞ <b>{days}</b> –¥–Ω—ñ - –≤–∏–¥–∞–ª–µ–Ω–∞!')
			await bot.send_message(chat_id=message.from_user.id, text=f'<b>–ì–æ—Ç–æ–≤–æ!</b>\n–ü—ñ–¥–ø–∏—Å–∫a —Å—Ç—Ä–æ–∫–æ–º –Ω–∞ <b>{days}</b> –¥–Ω—ñ - –≤–∏–¥–∞–ª–µ–Ω–∞!', reply_markup=brcs_key)
		elif delete_process == False:
			await bot.send_message(chat_id=message.from_user.id, text=f'<i>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏</i>', reply_markup=brcs_key)
	except:
		await bot.send_message(chat_id=message.from_user.id, text=f'<i>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏</i>', reply_markup=brcs_key)

# 
# 
# 


#
#
#
async def post_in_channel(dp: Dispatcher):
	print(123)
	prices_text = await pricesString('USDT', 'UAH', prices)
	await bot.send_message(-1001551885182, text=prices_text)
#
#
#




async def back(message: types.Message, state: FSMContext):
	current_state = await state.get_state()
	if current_state is None:
		return
	elif str(current_state) in ["FSMcreate:add_user", "FSMcreate:del_user", "FSMcreate:check_user", "FSMcreate:delete_price", "FSMcreate:add_price"]:
		await FSMcreate.admin_panel.set()
		await bot.send_message(chat_id = message.from_user.id, text = 'Ok', reply_markup=admin_key)
		return
	else:
		await state.finish()
		await bot.send_message(chat_id = message.from_user.id, text = 'Ok', reply_markup=greet_key)
		return

def register_handlers_create(dp: Dispatcher):
    dp.register_message_handler(back, state='*', commands=['–ù–∞–∑–∞–¥'])
    dp.register_message_handler(back, Text(equals='–Ω–∞–∑–∞–¥', ignore_case=True), state='*')
    dp.register_message_handler(admin_start, text=admin_password, state = None)
    dp.register_message_handler(add_user_start, text=["–î–æ–¥–∞—Ç–∏"], state = FSMcreate.admin_panel)
    dp.register_message_handler(add_user_main, state = FSMcreate.add_user)
    dp.register_message_handler(del_user_start, text=["–í–∏–¥–∞–ª–∏—Ç–∏"], state = FSMcreate.admin_panel)
    dp.register_message_handler(del_user_main, state = FSMcreate.del_user)
    dp.register_message_handler(list_users, text=["–°–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤"], state = FSMcreate.admin_panel)
    dp.register_message_handler(check_user_start, text=["–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ–Ω—Ñ–æ"], state = FSMcreate.admin_panel)
    dp.register_message_handler(check_user_main, state = FSMcreate.check_user)
    dp.register_message_handler(list_prices, text=["–¶—ñ–Ω–∏ –Ω–∞ –ø—ñ–¥–ø–∏—Å–∫—É"], state = FSMcreate.admin_panel)
    dp.register_message_handler(add_price_start, text=["–î–æ–¥–∞—Ç–∏ —Ü—ñ–Ω—É"], state = FSMcreate.admin_panel)
    dp.register_message_handler(add_price_main, state = FSMcreate.add_price)
    dp.register_message_handler(del_price_start, text=["–í–∏–¥–∞–ª–∏—Ç–∏ —Ü—ñ–Ω—É"], state = FSMcreate.admin_panel)
    dp.register_message_handler(del_price_main, state = FSMcreate.delete_price)